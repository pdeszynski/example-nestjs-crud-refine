/* tslint:disable */
/* eslint-disable */
/**
 * example
 * The betting API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateManyTenantDto,
  GetManyBaseTenantControllerTenant200Response,
  Tenant,
} from "../models/index";
import {
  CreateManyTenantDtoFromJSON,
  CreateManyTenantDtoToJSON,
  GetManyBaseTenantControllerTenant200ResponseFromJSON,
  GetManyBaseTenantControllerTenant200ResponseToJSON,
  TenantFromJSON,
  TenantToJSON,
} from "../models/index";

export interface CreateManyBaseTenantControllerTenantRequest {
  createManyTenantDto: CreateManyTenantDto;
}

export interface CreateOneBaseTenantControllerTenantRequest {
  tenant: Tenant;
}

export interface DeleteOneBaseTenantControllerTenantRequest {
  id: number;
}

export interface GetManyBaseTenantControllerTenantRequest {
  fields?: Array<string>;
  s?: string;
  filter?: Array<string>;
  or?: Array<string>;
  sort?: Array<string>;
  join?: Array<string>;
  limit?: number;
  offset?: number;
  page?: number;
  cache?: number;
}

export interface GetOneBaseTenantControllerTenantRequest {
  id: number;
  fields?: Array<string>;
  join?: Array<string>;
  cache?: number;
}

export interface ReplaceOneBaseTenantControllerTenantRequest {
  id: number;
  tenant: Tenant;
}

export interface UpdateOneBaseTenantControllerTenantRequest {
  id: number;
  tenant: Tenant;
}

/**
 * DefaultApi - interface
 *
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  appControllerGetHelloRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>>;

  /**
   */
  appControllerGetHello(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void>;

  /**
   *
   * @summary Create multiple Tenants
   * @param {CreateManyTenantDto} createManyTenantDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  createManyBaseTenantControllerTenantRaw(
    requestParameters: CreateManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Tenant>>>;

  /**
   * Create multiple Tenants
   */
  createManyBaseTenantControllerTenant(
    requestParameters: CreateManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Tenant>>;

  /**
   *
   * @summary Create a single Tenant
   * @param {Tenant} tenant
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  createOneBaseTenantControllerTenantRaw(
    requestParameters: CreateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>>;

  /**
   * Create a single Tenant
   */
  createOneBaseTenantControllerTenant(
    requestParameters: CreateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant>;

  /**
   *
   * @summary Delete a single Tenant
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  deleteOneBaseTenantControllerTenantRaw(
    requestParameters: DeleteOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Delete a single Tenant
   */
  deleteOneBaseTenantControllerTenant(
    requestParameters: DeleteOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void>;

  /**
   *
   * @summary Retrieve multiple Tenants
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getManyBaseTenantControllerTenantRaw(
    requestParameters: GetManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetManyBaseTenantControllerTenant200Response>>;

  /**
   * Retrieve multiple Tenants
   */
  getManyBaseTenantControllerTenant(
    requestParameters: GetManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetManyBaseTenantControllerTenant200Response>;

  /**
   *
   * @summary Retrieve a single Tenant
   * @param {number} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  getOneBaseTenantControllerTenantRaw(
    requestParameters: GetOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>>;

  /**
   * Retrieve a single Tenant
   */
  getOneBaseTenantControllerTenant(
    requestParameters: GetOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant>;

  /**
   *
   * @summary Replace a single Tenant
   * @param {number} id
   * @param {Tenant} tenant
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  replaceOneBaseTenantControllerTenantRaw(
    requestParameters: ReplaceOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>>;

  /**
   * Replace a single Tenant
   */
  replaceOneBaseTenantControllerTenant(
    requestParameters: ReplaceOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant>;

  /**
   *
   * @summary Update a single Tenant
   * @param {number} id
   * @param {Tenant} tenant
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApiInterface
   */
  updateOneBaseTenantControllerTenantRaw(
    requestParameters: UpdateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>>;

  /**
   * Update a single Tenant
   */
  updateOneBaseTenantControllerTenant(
    requestParameters: UpdateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant>;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {
  /**
   */
  async appControllerGetHelloRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async appControllerGetHello(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.appControllerGetHelloRaw(initOverrides);
  }

  /**
   * Create multiple Tenants
   */
  async createManyBaseTenantControllerTenantRaw(
    requestParameters: CreateManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Tenant>>> {
    if (requestParameters["createManyTenantDto"] == null) {
      throw new runtime.RequiredError(
        "createManyTenantDto",
        'Required parameter "createManyTenantDto" was null or undefined when calling createManyBaseTenantControllerTenant().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/tenant/bulk`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateManyTenantDtoToJSON(
          requestParameters["createManyTenantDto"]
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TenantFromJSON)
    );
  }

  /**
   * Create multiple Tenants
   */
  async createManyBaseTenantControllerTenant(
    requestParameters: CreateManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Tenant>> {
    const response = await this.createManyBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Create a single Tenant
   */
  async createOneBaseTenantControllerTenantRaw(
    requestParameters: CreateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>> {
    if (requestParameters["tenant"] == null) {
      throw new runtime.RequiredError(
        "tenant",
        'Required parameter "tenant" was null or undefined when calling createOneBaseTenantControllerTenant().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/tenant`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: TenantToJSON(requestParameters["tenant"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TenantFromJSON(jsonValue)
    );
  }

  /**
   * Create a single Tenant
   */
  async createOneBaseTenantControllerTenant(
    requestParameters: CreateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant> {
    const response = await this.createOneBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete a single Tenant
   */
  async deleteOneBaseTenantControllerTenantRaw(
    requestParameters: DeleteOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteOneBaseTenantControllerTenant().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tenant/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a single Tenant
   */
  async deleteOneBaseTenantControllerTenant(
    requestParameters: DeleteOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteOneBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Retrieve multiple Tenants
   */
  async getManyBaseTenantControllerTenantRaw(
    requestParameters: GetManyBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<GetManyBaseTenantControllerTenant200Response>
  > {
    const queryParameters: any = {};

    if (requestParameters["fields"] != null) {
      queryParameters["fields"] = requestParameters["fields"]!.join(
        runtime.COLLECTION_FORMATS["csv"]
      );
    }

    if (requestParameters["s"] != null) {
      queryParameters["s"] = requestParameters["s"];
    }

    if (requestParameters["filter"] != null) {
      queryParameters["filter"] = requestParameters["filter"];
    }

    if (requestParameters["or"] != null) {
      queryParameters["or"] = requestParameters["or"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    if (requestParameters["join"] != null) {
      queryParameters["join"] = requestParameters["join"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    if (requestParameters["offset"] != null) {
      queryParameters["offset"] = requestParameters["offset"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["cache"] != null) {
      queryParameters["cache"] = requestParameters["cache"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tenant`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetManyBaseTenantControllerTenant200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve multiple Tenants
   */
  async getManyBaseTenantControllerTenant(
    requestParameters: GetManyBaseTenantControllerTenantRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetManyBaseTenantControllerTenant200Response> {
    const response = await this.getManyBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieve a single Tenant
   */
  async getOneBaseTenantControllerTenantRaw(
    requestParameters: GetOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getOneBaseTenantControllerTenant().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["fields"] != null) {
      queryParameters["fields"] = requestParameters["fields"]!.join(
        runtime.COLLECTION_FORMATS["csv"]
      );
    }

    if (requestParameters["join"] != null) {
      queryParameters["join"] = requestParameters["join"];
    }

    if (requestParameters["cache"] != null) {
      queryParameters["cache"] = requestParameters["cache"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/tenant/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TenantFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve a single Tenant
   */
  async getOneBaseTenantControllerTenant(
    requestParameters: GetOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant> {
    const response = await this.getOneBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Replace a single Tenant
   */
  async replaceOneBaseTenantControllerTenantRaw(
    requestParameters: ReplaceOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling replaceOneBaseTenantControllerTenant().'
      );
    }

    if (requestParameters["tenant"] == null) {
      throw new runtime.RequiredError(
        "tenant",
        'Required parameter "tenant" was null or undefined when calling replaceOneBaseTenantControllerTenant().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/tenant/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: TenantToJSON(requestParameters["tenant"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TenantFromJSON(jsonValue)
    );
  }

  /**
   * Replace a single Tenant
   */
  async replaceOneBaseTenantControllerTenant(
    requestParameters: ReplaceOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant> {
    const response = await this.replaceOneBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update a single Tenant
   */
  async updateOneBaseTenantControllerTenantRaw(
    requestParameters: UpdateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tenant>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateOneBaseTenantControllerTenant().'
      );
    }

    if (requestParameters["tenant"] == null) {
      throw new runtime.RequiredError(
        "tenant",
        'Required parameter "tenant" was null or undefined when calling updateOneBaseTenantControllerTenant().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/tenant/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"]))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: TenantToJSON(requestParameters["tenant"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TenantFromJSON(jsonValue)
    );
  }

  /**
   * Update a single Tenant
   */
  async updateOneBaseTenantControllerTenant(
    requestParameters: UpdateOneBaseTenantControllerTenantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tenant> {
    const response = await this.updateOneBaseTenantControllerTenantRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
